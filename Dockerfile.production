# Multi-stage production Dockerfile with sandboxing support
# Build stage
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++ curl

# Install pnpm
RUN corepack enable && corepack prepare pnpm@9.0.0 --activate

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml ./

# Copy scripts directory for postinstall
COPY scripts ./scripts

# Install dependencies with frozen lockfile
RUN pnpm install --frozen-lockfile

# Copy application code
COPY . .

# Build arguments for build-time configuration
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_APP_URL

# Build application with standalone output
ENV NEXT_TELEMETRY_DISABLED=1
ENV NEXT_BUILD_STANDALONE=true
RUN pnpm build

# Migration stage
FROM node:20-alpine AS migrator

# Install PostgreSQL client for database operations
RUN apk add --no-cache postgresql-client

# Install pnpm
RUN corepack enable && corepack prepare pnpm@9.0.0 --activate

WORKDIR /app

# Copy dependencies and migration files
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/drizzle ./drizzle
COPY --from=builder /app/drizzle.config.ts ./drizzle.config.ts
COPY --from=builder /app/db ./db

ENV NODE_ENV=production
CMD ["pnpm", "db:migrate"]

# Production runtime stage
FROM node:20-alpine AS runner

# Install runtime dependencies including sandboxing tools
RUN apk add --no-cache \
    curl \
    bubblewrap \
    fuse3 \
    postgresql-client

# Create non-root user
RUN addgroup -g 1001 nodejs && \
    adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Create necessary directories with proper permissions
RUN mkdir -p /app/.cache/mcp-packages \
    /app/.cache/mcp-packages/pnpm-store \
    /app/.cache/mcp-packages/uv-cache \
    /app/uploads \
    && chown -R nextjs:nodejs /app/.cache /app/uploads

# Set environment variables
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    PORT=3000 \
    HOSTNAME="0.0.0.0" \
    MCP_PACKAGE_STORE_DIR=/app/.cache/mcp-packages \
    MCP_PNPM_STORE_DIR=/app/.cache/mcp-packages/pnpm-store \
    MCP_UV_CACHE_DIR=/app/.cache/mcp-packages/uv-cache

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Start application
CMD ["node", "server.js"]