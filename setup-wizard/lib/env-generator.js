const fs = require('fs');
const path = require('path');
const {
  getEnvironmentDefaults,
  getProductionDefaults,
  getFeatureDefaults,
  getMCPDefaults,
} = require('./docker-detector');

/**
 * Generate the .env file content from configuration
 * @param {Object} config - Configuration object
 * @returns {string} .env file content
 */
function generateEnvContent(config) {
  const lines = [];

  // Header
  lines.push('# Plugged.in Configuration');
  lines.push('# Generated by Setup Wizard');
  lines.push(`# Created: ${new Date().toISOString()}`);
  lines.push('');

  // Core Configuration
  lines.push('# ============================================');
  lines.push('# Core Configuration');
  lines.push('# ============================================');
  lines.push('');
  lines.push(`DATABASE_URL="${config.DATABASE_URL}"`);
  lines.push(`NEXTAUTH_URL="${config.NEXTAUTH_URL}"`);
  lines.push(`NEXTAUTH_SECRET="${config.NEXTAUTH_SECRET}"`);
  lines.push(`NEXT_PUBLIC_APP_URL="${config.NEXT_PUBLIC_APP_URL}"`);
  lines.push('');

  // Security (Auto-Generated)
  lines.push('# ============================================');
  lines.push('# Security Keys (Auto-Generated)');
  lines.push('# DO NOT SHARE OR COMMIT THESE VALUES');
  lines.push('# ============================================');
  lines.push('');
  lines.push(`API_KEY_ENCRYPTION_SECRET="${config.API_KEY_ENCRYPTION_SECRET}"`);
  lines.push(`NEXT_SERVER_ACTIONS_ENCRYPTION_KEY="${config.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY}"`);
  lines.push(`UNSUBSCRIBE_TOKEN_SECRET="${config.UNSUBSCRIBE_TOKEN_SECRET}"`);
  lines.push(`ADMIN_MIGRATION_SECRET="${config.ADMIN_MIGRATION_SECRET}"`);
  lines.push('');

  // Production Services (PRESERVED)
  lines.push('# ============================================');
  lines.push('# Production Services');
  lines.push('# ============================================');
  lines.push('');
  lines.push(`RAG_API_URL="${config.RAG_API_URL}"`);
  lines.push(`NEXT_PUBLIC_REGISTRY_URL="${config.NEXT_PUBLIC_REGISTRY_URL}"`);
  lines.push(`REGISTRY_API_URL="${config.REGISTRY_API_URL}"`);
  lines.push(`REGISTRY_ENABLED=${config.REGISTRY_ENABLED}`);
  lines.push(`REGISTRY_INTERNAL_API_KEY="${config.REGISTRY_INTERNAL_API_KEY}"`);
  lines.push('');

  // AI Providers (Optional)
  if (config.ANTHROPIC_API_KEY || config.OPENAI_API_KEY || config.GOOGLE_API_KEY || config.XAI_API_KEY) {
    lines.push('# ============================================');
    lines.push('# AI Provider API Keys');
    lines.push('# ============================================');
    lines.push('');
    if (config.ANTHROPIC_API_KEY) {
      lines.push(`ANTHROPIC_API_KEY="${config.ANTHROPIC_API_KEY}"`);
    }
    if (config.OPENAI_API_KEY) {
      lines.push(`OPENAI_API_KEY="${config.OPENAI_API_KEY}"`);
    }
    if (config.GOOGLE_API_KEY) {
      lines.push(`GOOGLE_API_KEY="${config.GOOGLE_API_KEY}"`);
    }
    if (config.XAI_API_KEY) {
      lines.push(`XAI_API_KEY="${config.XAI_API_KEY}"`);
    }
    if (config.DEFAULT_MODEL) {
      lines.push(`DEFAULT_MODEL="${config.DEFAULT_MODEL}"`);
    }
    lines.push('');
  }

  // Email Configuration (Optional)
  if (config.EMAIL_SERVER_HOST) {
    lines.push('# ============================================');
    lines.push('# Email Configuration');
    lines.push('# ============================================');
    lines.push('');
    lines.push(`EMAIL_FROM="${config.EMAIL_FROM || 'noreply@plugged.in'}"`);
    lines.push(`EMAIL_FROM_NAME="${config.EMAIL_FROM_NAME || 'Pluggedin'}"`);
    if (config.EMAIL_REPLY_TO) {
      lines.push(`EMAIL_REPLY_TO="${config.EMAIL_REPLY_TO}"`);
    }
    lines.push(`EMAIL_SERVER_HOST="${config.EMAIL_SERVER_HOST}"`);
    lines.push(`EMAIL_SERVER_PORT=${config.EMAIL_SERVER_PORT || 587}`);
    lines.push(`EMAIL_SERVER_USER="${config.EMAIL_SERVER_USER}"`);
    lines.push(`EMAIL_SERVER_PASSWORD="${config.EMAIL_SERVER_PASSWORD}"`);
    lines.push('');
  }

  // Admin Configuration (Optional)
  if (config.ADMIN_NOTIFICATION_EMAILS) {
    lines.push('# ============================================');
    lines.push('# Admin Configuration');
    lines.push('# ============================================');
    lines.push('');
    lines.push(`ADMIN_NOTIFICATION_EMAILS="${config.ADMIN_NOTIFICATION_EMAILS}"`);
    lines.push(`ADMIN_NOTIFICATION_SEVERITIES="${config.ADMIN_NOTIFICATION_SEVERITIES || 'ALERT,CRITICAL'}"`);
    lines.push(`ADMIN_DAILY_SUMMARY=${config.ADMIN_DAILY_SUMMARY || 'false'}`);
    lines.push(`ADMIN_FAILED_LOGIN_THRESHOLD=${config.ADMIN_FAILED_LOGIN_THRESHOLD || '5'}`);
    lines.push('');
  }

  // OAuth Providers (Optional)
  if (config.GITHUB_CLIENT_ID || config.GOOGLE_CLIENT_ID) {
    lines.push('# ============================================');
    lines.push('# OAuth Providers');
    lines.push('# ============================================');
    lines.push('');
    if (config.GITHUB_CLIENT_ID) {
      lines.push(`GITHUB_CLIENT_ID="${config.GITHUB_CLIENT_ID}"`);
      lines.push(`GITHUB_CLIENT_SECRET="${config.GITHUB_CLIENT_SECRET}"`);
      if (config.GITHUB_TOKEN) {
        lines.push(`GITHUB_TOKEN="${config.GITHUB_TOKEN}"`);
      }
    }
    if (config.GOOGLE_CLIENT_ID) {
      lines.push(`GOOGLE_CLIENT_ID="${config.GOOGLE_CLIENT_ID}"`);
      lines.push(`GOOGLE_CLIENT_SECRET="${config.GOOGLE_CLIENT_SECRET}"`);
    }
    lines.push('');
  }

  // Stripe (Optional)
  if (config.STRIPE_SECRET_KEY) {
    lines.push('# ============================================');
    lines.push('# Stripe Payment Integration');
    lines.push('# ============================================');
    lines.push('');
    lines.push(`STRIPE_SECRET_KEY="${config.STRIPE_SECRET_KEY}"`);
    lines.push(`STRIPE_WEBHOOK_SECRET="${config.STRIPE_WEBHOOK_SECRET}"`);
    lines.push(`NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY="${config.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}"`);
    lines.push('');
  }

  // Feature Flags
  lines.push('# ============================================');
  lines.push('# Feature Flags');
  lines.push('# ============================================');
  lines.push('');
  lines.push(`ENABLE_RAG=${config.ENABLE_RAG}`);
  lines.push(`ENABLE_NOTIFICATIONS=${config.ENABLE_NOTIFICATIONS}`);
  lines.push(`ENABLE_EMAIL_VERIFICATION=${config.ENABLE_EMAIL_VERIFICATION || 'false'}`);
  lines.push(`ENABLE_WELCOME_EMAILS=${config.ENABLE_WELCOME_EMAILS || 'true'}`);
  lines.push(`ENABLE_FOLLOW_UP_EMAILS=${config.ENABLE_FOLLOW_UP_EMAILS || 'true'}`);
  lines.push('');

  // MCP Configuration
  lines.push('# ============================================');
  lines.push('# MCP Server Configuration');
  lines.push('# ============================================');
  lines.push('');
  lines.push(`MCP_CPU_CORES_MAX=${config.MCP_CPU_CORES_MAX}`);
  lines.push(`MCP_MEMORY_MAX_MB=${config.MCP_MEMORY_MAX_MB}`);
  lines.push(`MCP_IO_READ_MBPS=${config.MCP_IO_READ_MBPS}`);
  lines.push(`MCP_IO_WRITE_MBPS=${config.MCP_IO_WRITE_MBPS}`);
  lines.push(`MCP_PROCESS_TIMEOUT_MS=${config.MCP_PROCESS_TIMEOUT_MS}`);
  lines.push(`MCP_STARTUP_TIMEOUT_MS=${config.MCP_STARTUP_TIMEOUT_MS}`);
  lines.push('');

  // Package Management
  lines.push('# ============================================');
  lines.push('# Package Management');
  lines.push('# ============================================');
  lines.push('');
  lines.push(`MCP_PACKAGE_STORE_DIR="${config.MCP_PACKAGE_STORE_DIR}"`);
  lines.push(`MCP_PNPM_STORE_DIR="${config.MCP_PNPM_STORE_DIR}"`);
  lines.push(`MCP_UV_CACHE_DIR="${config.MCP_UV_CACHE_DIR}"`);
  lines.push(`MCP_PACKAGE_CACHE_DAYS=${config.MCP_PACKAGE_CACHE_DAYS}`);
  lines.push(`MCP_PREWARM_COMMON_PACKAGES=${config.MCP_PREWARM_COMMON_PACKAGES}`);
  lines.push('');

  // Isolation
  lines.push('# ============================================');
  lines.push('# Isolation Configuration');
  lines.push('# ============================================');
  lines.push('');
  lines.push(`MCP_ISOLATION_TYPE="${config.MCP_ISOLATION_TYPE}"`);
  lines.push(`MCP_ISOLATION_FALLBACK="${config.MCP_ISOLATION_FALLBACK}"`);
  lines.push(`MCP_ENABLE_NETWORK_ISOLATION=${config.MCP_ENABLE_NETWORK_ISOLATION}`);
  lines.push('');

  // Interpreter Paths
  lines.push('# ============================================');
  lines.push('# Interpreter Paths');
  lines.push('# ============================================');
  lines.push('');
  lines.push(`MCP_NODEJS_BIN_DIR="${config.MCP_NODEJS_BIN_DIR}"`);
  lines.push(`MCP_PYTHON_BIN_DIR="${config.MCP_PYTHON_BIN_DIR}"`);
  lines.push(`MCP_DOCKER_BIN_DIR="${config.MCP_DOCKER_BIN_DIR}"`);
  lines.push('');

  return lines.join('\n');
}

/**
 * Write .env file with proper permissions
 * @param {Object} config - Configuration object
 * @param {string} targetPath - Path to write .env file (default: parent directory)
 * @returns {Promise<void>}
 */
async function writeEnvFile(config, targetPath = path.join(__dirname, '../../.env')) {
  const content = generateEnvContent(config);

  // Write file
  await fs.promises.writeFile(targetPath, content, 'utf8');

  // Set permissions to 0600 (owner read/write only) on Unix systems
  if (process.platform !== 'win32') {
    await fs.promises.chmod(targetPath, 0o600);
  }

  console.log(`âœ… .env file created successfully at: ${targetPath}`);
}

/**
 * Parse existing .env file
 * @param {string} filePath - Path to .env file
 * @returns {Promise<Object>} Parsed configuration object
 */
async function parseEnvFile(filePath) {
  const content = await fs.promises.readFile(filePath, 'utf8');
  const config = {};

  const lines = content.split('\n');
  for (const line of lines) {
    // Skip comments and empty lines
    if (line.trim().startsWith('#') || !line.trim()) {
      continue;
    }

    // Parse KEY=VALUE or KEY="VALUE"
    const match = line.match(/^([^=]+)=(.*)$/);
    if (match) {
      const key = match[1].trim();
      let value = match[2].trim();

      // Remove quotes if present
      if ((value.startsWith('"') && value.endsWith('"')) ||
          (value.startsWith("'") && value.endsWith("'"))) {
        value = value.slice(1, -1);
      }

      config[key] = value;
    }
  }

  return config;
}

/**
 * Merge user config with defaults
 * @param {Object} userConfig - User-provided configuration
 * @param {string} dbPassword - Database password
 * @returns {Object} Complete configuration with defaults
 */
function mergeWithDefaults(userConfig, dbPassword) {
  const envDefaults = getEnvironmentDefaults(dbPassword);
  const prodDefaults = getProductionDefaults();
  const featureDefaults = getFeatureDefaults();
  const mcpDefaults = getMCPDefaults();

  return {
    ...envDefaults,
    ...prodDefaults,
    ...featureDefaults,
    ...mcpDefaults,
    ...userConfig, // User config overrides defaults
  };
}

module.exports = {
  generateEnvContent,
  writeEnvFile,
  parseEnvFile,
  mergeWithDefaults,
};
