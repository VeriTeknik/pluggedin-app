import { DrizzleAdapter } from '@auth/drizzle-adapter';
import { compare } from 'bcrypt';
import { NextAuthOptions } from 'next-auth';
import { getServerSession } from 'next-auth/next';
import CredentialsProvider from 'next-auth/providers/credentials';
import EmailProvider from 'next-auth/providers/email';
import GithubProvider from 'next-auth/providers/github';
import GoogleProvider from 'next-auth/providers/google';

import { db } from '@/db';
import { accounts, sessions, users, verificationTokens } from '@/db/schema';

// Simple logger - replace with your actual logging mechanism
const logger = {
  info: (message: string, data?: any) => {
    console.info(`[INFO] ${message}`, data);
  },
  warn: (message: string, data?: any) => {
    console.warn(`[WARN] ${message}`, data);
  },
  error: (message: string, data?: any) => {
    console.error(`[ERROR] ${message}`, data);
  }
};

// Helper to generate random IDs for error tracking
const generateErrorId = () => {
  return `err_${Math.random().toString(36).substring(2, 15)}`;
};

export const authOptions: NextAuthOptions = {
  adapter: DrizzleAdapter(db, {
    usersTable: users,
    accountsTable: accounts,
    sessionsTable: sessions,
    verificationTokensTable: verificationTokens
  }),
  secret: process.env.AUTH_SECRET,
  session: {
    strategy: 'jwt',
  },
  pages: {
    signIn: '/login',
    signOut: '/logout',
    error: '/login',
    verifyRequest: '/verify-request',
    newUser: '/register',
  },
  providers: [
    CredentialsProvider({
      name: 'credentials',
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" }
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          throw new Error('Email and password required');
        }

        const user = await db.query.users.findFirst({
          where: (users, { eq }) => eq(users.email, credentials.email),
        });

        if (!user || !user.password) {
          throw new Error('User not found');
        }

        if (!user.emailVerified) {
          throw new Error('Email not verified');
        }

        const isPasswordValid = await compare(credentials.password, user.password);

        if (!isPasswordValid) {
          throw new Error('Invalid password');
        }

        return {
          id: user.id,
          name: user.name,
          email: user.email,
          image: user.image,
        };
      }
    }),
    GithubProvider({
      clientId: process.env.GITHUB_ID!,
      clientSecret: process.env.GITHUB_SECRET!,
    }),
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
    EmailProvider({
      server: {
        host: process.env.EMAIL_SERVER_HOST,
        port: process.env.EMAIL_SERVER_PORT ? parseInt(process.env.EMAIL_SERVER_PORT) : 587,
        auth: {
          user: process.env.EMAIL_SERVER_USER,
          pass: process.env.EMAIL_SERVER_PASSWORD,
        },
      },
      from: `${process.env.EMAIL_FROM_NAME} <${process.env.EMAIL_FROM}>`,
    }),
  ],
  callbacks: {
    async signIn({ user, account, profile }) {
      // Allow credential login even if email not verified
      // The authorize function above already handles email verification
      if (account?.provider === 'credentials') {
        return true;
      }

      // For OAuth logins, check email
      if (!user.email) {
        logger.warn('OAuth login attempt without email', { 
          provider: account?.provider, 
          userId: user.id 
        });
        return false;
      }

      try {
        // Enhanced email verification for OAuth providers
        // Verify that the email provided by OAuth is verified by the provider
        // Most providers verify emails, but we should double-check
        const isEmailVerifiedByProvider = 
          // Check if provider explicitly indicates email verification
          (profile && 'email_verified' in profile && profile.email_verified === true) ||
          // Google and GitHub verify emails by default, so we trust them
          (account?.provider === 'github' || account?.provider === 'google');
        
        if (!isEmailVerifiedByProvider) {
          logger.warn('OAuth provider did not verify email', { 
            provider: account?.provider, 
            email: user.email 
          });
          return false;
        }

        // Check if user exists with this email
        const existingUser = await db.query.users.findFirst({
          where: (users, { eq }) => eq(users.email, user.email as string),
        });

        if (existingUser) {
          // Rate limiting for account linking attempts
          // Note: Requires additional table in schema for production use
          // This is a simplified example
          /* 
          const recentLinkingAttempts = await db.query.linkingAttempts.count({
            where: (attempts, { eq, and, gt }) => and(
              eq(attempts.email, user.email as string),
              gt(attempts.timestamp, new Date(Date.now() - 24 * 60 * 60 * 1000))
            ),
          });

          if (recentLinkingAttempts > 5) {
            logger.warn('Too many account linking attempts', { email: user.email });
            return false;
          }

          // Record the attempt 
          await db.insert(linkingAttempts).values({
            email: user.email as string,
            provider: account?.provider || '',
            timestamp: new Date(),
          });
          */

          // User exists - check if this OAuth account is already linked
          const linkedAccount = await db.query.accounts.findFirst({
            where: (accounts, { eq, and }) => and(
              eq(accounts.userId, existingUser.id),
              eq(accounts.provider, account?.provider || '')
            ),
          });

          if (!linkedAccount && account) {
            logger.info('Linking new OAuth account to existing user', {
              userId: existingUser.id,
              provider: account.provider
            });

            // Link this OAuth account to the existing user
            await db.insert(accounts).values({
              userId: existingUser.id,
              type: account.type,
              provider: account.provider,
              providerAccountId: account.providerAccountId,
              refresh_token: account.refresh_token,
              access_token: account.access_token,
              token_type: account.token_type,
              scope: account.scope,
              id_token: account.id_token,
              session_state: account.session_state,
            });
          }

          // Set the id to the existing user id to ensure we use that account
          user.id = existingUser.id;
        } else {
          logger.info('Creating new user from OAuth login', {
            provider: account?.provider,
            email: user.email
          });
        }

        return true;
      } catch (error) {
        const errorId = generateErrorId();
        const errorDetails = {
          id: errorId,
          context: 'auth:signIn',
          error: error instanceof Error ? error.message : 'Unknown error',
          stack: error instanceof Error ? error.stack : undefined,
          user: { email: user.email },
          provider: account?.provider,
        };
        
        logger.error('Authentication error', errorDetails);
        return false;
      }
    },
    async session({ token, session }) {
      if (token) {
        session.user.id = token.id as string;
        session.user.name = token.name;
        session.user.email = token.email;
        session.user.image = token.picture;

        // Fetch linked providers for this user to enhance the session
        try {
          const linkedAccounts = await db.query.accounts.findMany({
            where: (accounts, { eq }) => eq(accounts.userId, token.id as string),
          });

          // Add the list of providers to the session
          session.user.providers = linkedAccounts.map(account => account.provider);
        } catch (error) {
          // Gracefully handle error - don't block session creation
          logger.error('Error fetching linked accounts', {
            userId: token.id,
            error: error instanceof Error ? error.message : 'Unknown error'
          });
        }
      }

      return session;
    },
    async jwt({ token, user }) {
      const dbUser = user ? { 
        id: user.id, 
        name: user.name || '', 
        email: user.email || '' 
      } : undefined;

      if (dbUser) {
        token.id = dbUser.id;
        token.name = dbUser.name;
        token.email = dbUser.email;
      }

      return token;
    },
  },
};

export function getAuthSession() {
  return getServerSession(authOptions);
}

// Extend the next-auth types to include user id and providers
declare module 'next-auth' {
  interface Session {
    user: {
      id: string;
      name: string;
      email: string;
      image?: string;
      providers?: string[]; // List of linked providers
    };
  }
}

declare module 'next-auth/jwt' {
  interface JWT {
    id: string;
    name: string;
    email: string;
    picture?: string;
  }
} 